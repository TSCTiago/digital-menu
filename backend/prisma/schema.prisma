// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin_user Admin_User[]
  restaurant_user Restaurant_User[]
  refreshToken RefreshToken[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Restaurant {
  id                 String   @id @default(cuid())
  name               String
  slug               String
  logo_url           String?
  address            String
  address_complement String?
  address_number     String
  city               String
  state              String
  country            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  menu Menu[]
  restaurant_user Restaurant_User[]
}

model Menu {
  id           String         @id @default(cuid())
  restaurantId String
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id])
  isActive     Boolean
  pdf_url      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  MenuItem     MenuItem[]
  categoryItem CategoryItem[]
}

model CategoryItem {
  id        String   @id @default(cuid())
  name      String
  menuId    String
  menu      Menu     @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuItem MenuItem[]
}

model MenuItem {
  id          String       @id @default(cuid())
  menuId      String
  menu        Menu         @relation(fields: [menuId], references: [id])
  name        String
  description String
  price       Float
  photo       String?
  categoryId  String
  category    CategoryItem @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Restaurant_User {
  id           String     @id @default(cuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  role         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Admin_User {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
